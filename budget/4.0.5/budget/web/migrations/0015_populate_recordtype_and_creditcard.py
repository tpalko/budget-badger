# Generated by Django 4.0.5 on 2022-09-14 02:28

from django.conf import settings 
from django.db import migrations
from decimal import Decimal

def forwards_func(apps, schema_editor):

    Account = apps.get_model("web", "Account")
    RecordType = apps.get_model("web", "RecordType")
    CreditCard = apps.get_model("web", "CreditCard")
    CreditCardTransaction = apps.get_model("web", "CreditCardTransaction")
    UploadedFile = apps.get_model("web", "UploadedFile")

    # -- populate RecordType with distinct set of csv parameters from Account
    # -- save matching/created RecordType back to Account
    for account in Account.objects.all():
        recordtype_lookup = RecordType.objects.filter(csv_columns=account.csv_columns, csv_date_format=account.csv_date_format)
        recordtype = None 
        if recordtype_lookup.count() == 0:
            recordtype = RecordType.objects.create(csv_columns=account.csv_columns, csv_date_format=account.csv_date_format, name=f'{account.name} record')
        else:
            recordtype = recordtype_lookup.first()
        account.recordtype = recordtype
        account.save()
    
    amex_recordtype = None 
    amex_recordtype_lookup = RecordType.objects.filter(name__icontains='amex')
    if amex_recordtype_lookup.count() > 0:
        amex_recordtype = recordtype_lookup.first()

    # -- populate CreditCard with each CreditCardTransaction    
    # -- set amex CreditCard recordtype to the RecordType created from the 'amex' Account
    amex_creditcard = None 
    
    for cct in CreditCardTransaction.objects.all():
        is_amex = False 

        recordtype = None 
        if cct.name.lower().find('american express') >= 0:
            recordtype = amex_recordtype 
            is_amex = True 
            
        creditcard = CreditCard.objects.create(name=cct.name, interest_rate=cct.interest_rate, recordtype=recordtype)

        if is_amex:
            amex_creditcard = creditcard 

        cct.creditcard = creditcard 
        cct.save()
    
    if amex_creditcard:
        for uploadedfile in UploadedFile.objects.filter(original_filename__icontains='amex'):
            for record in uploadedfile.account.records.all():
                record.creditcard = amex_creditcard 
                record.account = None 
                record.save()
            uploadedfile.creditcard = amex_creditcard 
            uploadedfile.account = None 
            uploadedfile.save()
    
def reverse_func(apps, schema_editor):
    Account = apps.get_model("web", "Account")
    RecordType = apps.get_model("web", "RecordType")
    CreditCard = apps.get_model("web", "CreditCard")
    CreditCardTransaction = apps.get_model("web", "CreditCardTransaction")
    UploadedFile = apps.get_model("web", "UploadedFile")

    amex_account = None 
    amex_account_lookup = Account.objects.filter(name__icontains='amex')
    if amex_account_lookup.count() > 0:
        amex_account = amex_account_lookup.first() 
    
    if amex_account:
        for uploadedfile in UploadedFile.objects.filter(name__icontains='amex'):
            for record in uploadedfile.account.records.all():
                record.creditcard = None  
                record.account = amex_account 
                record.save()
            uploadedfile.creditcard = None  
            uploadedfile.account = amex_account 
            uploadedfile.save()
    
    for cct in CreditCardTransaction.objects.all():
        cct.creditcard.delete()
        cct.creditcard = None 
        cct.save()

    for recordtype in RecordType.objects.all():
        matching_account_lookup = Account.objects.filter(recordtype=recordtype)
        if matching_account_lookup.count() > 0:
            for matching_account in matching_account_lookup:
                matching_account.csv_columns = recordtype.csv_columns 
                matching_account.csv_date_format = recordtype.csv_date_format 
                matching_account.recordtype = None 
                matching_account.save()
        recordtype.delete()

class Migration(migrations.Migration):

    dependencies = [
        ('web', '0014_recordtype_alter_record_account_and_more'),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func),
    ]
