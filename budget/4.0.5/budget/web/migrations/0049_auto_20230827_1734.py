# Generated by Django 4.0.5 on 2023-08-27 17:34

from django.db import migrations
import logging 

logger = logging.getLogger(__name__)

def forwards_func(apps, schema_editor):

    Record = apps.get_model("web", "Record")
    RecordMeta = apps.get_model("web", "RecordMeta")

    all_records = Record.objects.all()
    for record in all_records:
        logger.info(f'-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-')
        logger.info(f'migrating record {record.id}')
        if not record.extra_fields_hash:            
            logger.info(f'hash missing, saving record to generate hash: {record.extra_fields}')
            if record.extra_fields is None:
                record.extra_fields = {}
            import hashlib 
            import json 
            record.extra_fields_hash = hashlib.md5(json.dumps(record.extra_fields, sort_keys=True, ensure_ascii=True).encode('utf-8')).hexdigest()            
            record.save()
        else:
            logger.info(f'hash is {record.extra_fields_hash}')
        record.refresh_from_db()
        if not record.extra_fields_hash:
            raise Exception(f'record {record.id} saved has no extra_fields_hash')
        meta = RecordMeta.objects.filter(extra_fields_hash=record.extra_fields_hash).first()
        if not meta:
            logger.info(f'meta record missing, creating now from record')
            new_meta = RecordMeta.objects.create(extra_fields_hash=record.extra_fields_hash, record_type=record.record_type)
            logger.info(f'meta record {new_meta.id} created')
        else:
            logger.info(f'meta record {meta.id} present in database')
            if meta.record_type != record.record_type:
                logger.info(f'meta record type mismatch {meta.record_type} / {record.record_type}')
                meta.record_type = record.record_type
                meta.save()            
            else:
                logger.info(f'meta record is correct - {meta.record_type}')

def reverse_func(apps, schema_editor):
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('web', '0048_recordmeta_record_extra_fields_hash'),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func),
    ]
